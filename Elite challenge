<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Stellar Shop - E-Commerce App</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script type="module">
        import { initializeApp } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-app.js";
        import { getAuth, signInAnonymously, signInWithCustomToken, onAuthStateChanged } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-auth.js";
        import { getFirestore, doc, getDoc, setDoc, onSnapshot, collection, query, getDocs, updateDoc, addDoc, serverTimestamp, setLogLevel } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-firestore.js";

        // IMPORTANT: Use the global variables provided by the environment
        const appId = typeof __app_id !== 'undefined' ? __app_id : 'default-app-id';
        const firebaseConfig = typeof __firebase_config !== 'undefined' ? JSON.parse(__firebase_config) : {};
        const initialAuthToken = typeof __initial_auth_token !== 'undefined' ? __initial_auth_token : null;

        // --- FIREBASE INITIALIZATION & PATHS ---
        const app = initializeApp(firebaseConfig);
        const db = getFirestore(app);
        const auth = getAuth(app);

        // Set logging to debug for development visibility
        setLogLevel('Debug');

        let currentUserId = null;
        let products = [];
        let cartItems = {}; // { productId: { item: product, quantity: N } }
        let currentView = 'ProductList'; // 'ProductList', 'Cart', 'Checkout', 'Confirmation'
        
        // Firestore Data Paths
        const getProductsCollectionRef = () => collection(db, `artifacts/${appId}/public/data/products`);
        const getCartDocRef = (userId) => doc(db, `artifacts/${appId}/users/${userId}/cart/currentCart`);
        const getOrdersCollectionRef = (userId) => collection(db, `artifacts/${appId}/users/${userId}/orders`);

        // --- SEED DATA ---
        const initialProducts = [
            { id: "A001", name: "Nebula Hoodie", price: 49.99, description: "Heavyweight cotton with embroidered constellation map.", imageUrl: "https://placehold.co/400x300/1e293b/ffffff?text=Nebula+Hoodie", stock: 15 },
            { id: "A002", name: "Plasma Drinkware", price: 19.99, description: "Insulated tumbler that changes color with temperature.", imageUrl: "https://placehold.co/400x300/4f46e5/ffffff?text=Plasma+Tumbler", stock: 25 },
            { id: "A003", name: "Quantum Mouse", price: 79.99, description: "Ergonomic design with magnetic scroll wheel and silent click.", imageUrl: "https://placehold.co/400x300/ef4444/ffffff?text=Quantum+Mouse", stock: 10 },
            { id: "A004", name: "Synthwave Poster", price: 12.50, description: "Premium print on matte paper. 24x36 inches.", imageUrl: "https://placehold.co/400x300/f97316/ffffff?text=Synthwave+Poster", stock: 50 },
        ];

        async function seedProducts() {
            try {
                const q = query(getProductsCollectionRef());
                const snapshot = await getDocs(q);
                
                if (snapshot.empty) {
                    console.log("Seeding products...");
                    for (const product of initialProducts) {
                        const productRef = doc(db, getProductsCollectionRef().path, product.id);
                        await setDoc(productRef, product);
                    }
                    console.log("Products seeded successfully.");
                    // After seeding, set products from initial list for display
                    products = initialProducts; 
                } else {
                    products = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
                    console.log("Products loaded from Firestore.");
                }
            } catch (error) {
                console.error("Error seeding or fetching products:", error);
            }
        }

        // --- CART OPERATIONS ---
        
        function calculateCartTotal(cartItems, products) {
            let subtotal = 0;
            const productMap = new Map(products.map(p => [p.id, p]));
            
            Object.values(cartItems).forEach(cartItem => {
                const product = productMap.get(cartItem.productId);
                if (product) {
                    subtotal += product.price * cartItem.quantity;
                }
            });

            // Simple flat rate shipping
            const shipping = subtotal > 0 ? 10.00 : 0;
            const taxRate = 0.05; // 5% tax
            const tax = (subtotal + shipping) * taxRate;
            const total = subtotal + shipping + tax;

            return { subtotal, shipping, tax, total };
        }

        async function listenToCart() {
            if (!currentUserId) return;

            const cartDocRef = getCartDocRef(currentUserId);

            onSnapshot(cartDocRef, (docSnapshot) => {
                if (docSnapshot.exists()) {
                    const data = docSnapshot.data();
                    cartItems = data.items ? data.items.reduce((acc, item) => {
                        acc[item.productId] = item;
                        return acc;
                    }, {}) : {};
                } else {
                    // Document doesn't exist, initialize an empty cart
                    cartItems = {};
                    setDoc(cartDocRef, { items: [], updatedAt: serverTimestamp() }).catch(e => console.error("Error creating cart:", e));
                }
                renderApp();
                updateHeaderCartCount(); // <-- UPDATED: Update cart count in the header
            }, (error) => {
                console.error("Error listening to cart:", error);
            });
        }
        
        async function updateCartInFirestore(newCartItemsArray) {
            if (!currentUserId) return;
            const cartDocRef = getCartDocRef(currentUserId);
            try {
                await updateDoc(cartDocRef, {
                    items: newCartItemsArray,
                    updatedAt: serverTimestamp()
                });
            } catch(e) {
                console.error("Error updating cart:", e);
                // Handle case where doc might not exist yet (though listenToCart should prevent this)
                await setDoc(cartDocRef, { items: newCartItemsArray, updatedAt: serverTimestamp() });
            }
        }

        window.addToCart = async (productId) => {
            const product = products.find(p => p.id === productId);
            if (!product) return;

            const newCartItems = Object.values(cartItems).map(item => ({...item}));
            let existingItem = newCartItems.find(item => item.productId === productId);

            if (existingItem) {
                existingItem.quantity += 1;
            } else {
                newCartItems.push({ productId, quantity: 1, price: product.price });
            }

            await updateCartInFirestore(newCartItems.filter(item => item.quantity > 0));
        };

        window.updateQuantity = async (productId, delta) => {
            const newCartItems = Object.values(cartItems).map(item => ({...item}));
            const existingItemIndex = newCartItems.findIndex(item => item.productId === productId);

            if (existingItemIndex > -1) {
                newCartItems[existingItemIndex].quantity += delta;
            }

            await updateCartInFirestore(newCartItems.filter(item => item.quantity > 0));
        };

        window.checkout = async () => {
            if (Object.keys(cartItems).length === 0) {
                displayMessage("Your cart is empty!", "error");
                return;
            }
            
            const { subtotal, shipping, tax, total } = calculateCartTotal(cartItems, products);
            
            try {
                // 1. Create the Order
                const order = {
                    userId: currentUserId,
                    items: Object.values(cartItems),
                    subtotal: parseFloat(subtotal.toFixed(2)),
                    shipping: parseFloat(shipping.toFixed(2)),
                    tax: parseFloat(tax.toFixed(2)),
                    totalAmount: parseFloat(total.toFixed(2)),
                    status: 'paid', // Simulate payment success
                    timestamp: serverTimestamp(),
                    shippingAddress: { // Placeholder for checkout step data
                        name: document.getElementById('checkout-name').value || 'Anonymous User',
                        email: document.getElementById('checkout-email').value || 'anon@example.com',
                        address: document.getElementById('checkout-address').value || '123 E-Commerce Lane',
                    }
                };

                const ordersRef = getOrdersCollectionRef(currentUserId);
                await addDoc(ordersRef, order);

                // 2. Clear the Cart
                await setDoc(getCartDocRef(currentUserId), { items: [], updatedAt: serverTimestamp() });

                // 3. Update view to confirmation
                currentView = 'Confirmation';
                renderApp();
            } catch (error) {
                console.error("Error during checkout:", error);
                displayMessage("Checkout failed. Please try again.", "error");
            }
        };

        // --- UI RENDERING ---

        const shopApp = document.getElementById('shop-app');
        const messageBox = document.getElementById('message-box');
        
        function updateHeaderCartCount() {
            const cartCountElement = document.getElementById('cart-count');
            const count = Object.keys(cartItems).length;
            if (cartCountElement) {
                cartCountElement.textContent = count;
                // Hide badge if count is zero
                if (count === 0) {
                    cartCountElement.classList.add('hidden');
                } else {
                    cartCountElement.classList.remove('hidden');
                }
            }
        }


        function displayMessage(text, type = 'info') {
            messageBox.innerHTML = `
                <div class="p-3 mb-4 rounded-lg text-sm font-medium ${type === 'error' ? 'bg-red-100 text-red-700' : 'bg-green-100 text-green-700'}">
                    ${text}
                </div>
            `;
            setTimeout(() => messageBox.innerHTML = '', 3000);
        }
        
        // Navigation Handler
        window.setView = (view) => {
            if (view === 'Cart' && Object.keys(cartItems).length === 0) {
                 displayMessage("Your cart is empty! Add some products first.", "info");
                 return;
            }
            currentView = view;
            renderApp();
        };

        function formatCurrency(amount) {
            return new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(amount);
        }

        function renderProductList() {
            const productHtml = products.map(product => `
                <div class="bg-white shadow-xl rounded-xl overflow-hidden transform transition duration-300 hover:scale-[1.02]">
                    <div class="h-48 bg-gray-100 flex items-center justify-center">
                        <img src="${product.imageUrl}" alt="${product.name}" class="h-full w-full object-cover rounded-t-xl" onerror="this.onerror=null;this.src='https://placehold.co/400x300/374151/ffffff?text=Image+Not+Found';">
                    </div>
                    <div class="p-5">
                        <h3 class="text-xl font-semibold text-gray-900 truncate">${product.name}</h3>
                        <p class="text-gray-500 text-sm mt-1">${product.description}</p>
                        <div class="flex justify-between items-center mt-4">
                            <span class="text-2xl font-bold text-indigo-600">${formatCurrency(product.price)}</span>
                            <button onclick="addToCart('${product.id}')" 
                                class="flex items-center space-x-2 bg-indigo-600 hover:bg-indigo-700 text-white font-medium py-2 px-4 rounded-lg shadow-md transition duration-150 active:scale-95">
                                <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 3h2l.4 2M7 13h10l4-8H5.4M7 13L5.4 5M7 13l-2.293 2.293c-.63.63-.184 1.707.707 1.707H17m0 0a2 2 0 100 4 2 2 0 000-4zm-8 2a2 2 0 11-4 0 2 2 0 014 0z"></path></svg>
                                <span>Add to Cart</span>
                            </button>
                        </div>
                    </div>
                </div>
            `).join('');

            return `
                <h2 class="text-3xl font-extrabold text-gray-900 mb-6">Featured Products</h2>
                <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6">
                    ${productHtml}
                </div>
            `;
        }

        function renderCart() {
            const itemsArray = Object.values(cartItems);
            if (itemsArray.length === 0) {
                return '<p class="text-center text-xl text-gray-600 py-12">Your cart is empty. Time to start shopping!</p>';
            }

            const cartTotal = calculateCartTotal(cartItems, products);
            const productMap = new Map(products.map(p => [p.id, p]));

            const cartItemsHtml = itemsArray.map(item => {
                const product = productMap.get(item.productId);
                if (!product) return '';

                const lineTotal = item.quantity * item.price;

                return `
                    <li class="flex py-6 border-b">
                        <div class="h-20 w-20 flex-shrink-0 overflow-hidden rounded-md border border-gray-200">
                            <img src="${product.imageUrl}" alt="${product.name}" class="h-full w-full object-cover object-center" onerror="this.onerror=null;this.src='https://placehold.co/80x80/374151/ffffff?text=N/A';">
                        </div>
                        <div class="ml-4 flex flex-1 flex-col">
                            <div>
                                <div class="flex justify-between text-base font-medium text-gray-900">
                                    <h3>${product.name}</h3>
                                    <p class="ml-4">${formatCurrency(lineTotal)}</p>
                                </div>
                                <p class="mt-1 text-sm text-gray-500">${product.description.substring(0, 50)}...</p>
                            </div>
                            <div class="flex flex-1 items-end justify-between text-sm mt-2">
                                <div class="flex items-center space-x-2">
                                    <span class="text-gray-500">Qty:</span>
                                    <div class="flex border border-gray-300 rounded-lg overflow-hidden">
                                        <button onclick="updateQuantity('${item.productId}', -1)" 
                                                class="px-2 py-1 bg-gray-100 hover:bg-gray-200 text-gray-600 transition">-</button>
                                        <span class="px-3 py-1 bg-white text-gray-900">${item.quantity}</span>
                                        <button onclick="updateQuantity('${item.productId}', 1)" 
                                                class="px-2 py-1 bg-gray-100 hover:bg-gray-200 text-gray-600 transition">+</button>
                                    </div>
                                </div>
                                <div class="flex">
                                    <button onclick="updateQuantity('${item.productId}', -${item.quantity})" type="button" class="font-medium text-red-600 hover:text-red-500">
                                        Remove
                                    </button>
                                </div>
                            </div>
                        </div>
                    </li>
                `;
            }).join('');

            return `
                <div class="lg:flex lg:space-x-8">
                    <div class="lg:w-2/3">
                        <h2 class="text-3xl font-extrabold text-gray-900 mb-6">Your Shopping Cart</h2>
                        <ul role="list" class="divide-y divide-gray-200 border-t border-gray-200 mt-4">
                            ${cartItemsHtml}
                        </ul>
                    </div>
                    
                    <div class="lg:w-1/3 mt-8 lg:mt-0 sticky top-8">
                        <div class="bg-gray-50 rounded-xl shadow-lg p-6">
                            <h3 class="text-xl font-semibold text-gray-900 border-b pb-3 mb-4">Order Summary</h3>
                            <dl class="space-y-3">
                                <div class="flex justify-between">
                                    <dt class="text-gray-600">Subtotal</dt>
                                    <dd class="font-medium text-gray-900">${formatCurrency(cartTotal.subtotal)}</dd>
                                </div>
                                <div class="flex justify-between">
                                    <dt class="text-gray-600">Shipping</dt>
                                    <dd class="font-medium text-gray-900">${formatCurrency(cartTotal.shipping)}</dd>
                                </div>
                                <div class="flex justify-between border-b pb-3">
                                    <dt class="text-gray-600">Tax (5%)</dt>
                                    <dd class="font-medium text-gray-900">${formatCurrency(cartTotal.tax)}</dd>
                                </div>
                                <div class="flex justify-between pt-3">
                                    <dt class="text-xl font-bold text-gray-900">Order Total</dt>
                                    <dd class="text-xl font-bold text-indigo-600">${formatCurrency(cartTotal.total)}</dd>
                                </div>
                            </dl>
                            <button onclick="setView('Checkout')"
                                class="w-full mt-6 flex items-center justify-center rounded-lg border border-transparent bg-indigo-600 px-6 py-3 text-base font-medium text-white shadow-sm hover:bg-indigo-700 transition duration-150 active:scale-95">
                                Proceed to Checkout
                            </button>
                        </div>
                    </div>
                </div>
            `;
        }

        function renderCheckout() {
            const itemsArray = Object.values(cartItems);
            const cartTotal = calculateCartTotal(cartItems, products);
            const productMap = new Map(products.map(p => [p.id, p]));
            
            const reviewItemsHtml = itemsArray.map(item => {
                const product = productMap.get(item.productId);
                return `
                    <div class="flex justify-between py-2 border-b border-gray-100 text-sm">
                        <span class="text-gray-600">${item.quantity} x ${product ? product.name : 'Unknown Product'}</span>
                        <span class="font-medium text-gray-900">${formatCurrency(item.quantity * item.price)}</span>
                    </div>
                `;
            }).join('');

            return `
                <div class="max-w-4xl mx-auto">
                    <h2 class="text-3xl font-extrabold text-gray-900 mb-8 text-center">Checkout</h2>
                    
                    <div class="lg:grid lg:grid-cols-2 lg:gap-12">
                        <!-- Shipping/Payment Form -->
                        <div class="lg:col-span-1 bg-white p-8 rounded-xl shadow-xl">
                            <h3 class="text-2xl font-semibold mb-6 text-gray-800">Shipping Details</h3>
                            <form id="checkout-form" onsubmit="event.preventDefault(); window.checkout()">
                                <div class="space-y-4">
                                    <div>
                                        <label for="checkout-name" class="block text-sm font-medium text-gray-700">Full Name</label>
                                        <input type="text" id="checkout-name" required value="John Doe" class="mt-1 block w-full rounded-lg border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 p-3 border">
                                    </div>
                                    <div>
                                        <label for="checkout-email" class="block text-sm font-medium text-gray-700">Email Address</label>
                                        <input type="email" id="checkout-email" required value="john.doe@example.com" class="mt-1 block w-full rounded-lg border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 p-3 border">
                                    </div>
                                    <div>
                                        <label for="checkout-address" class="block text-sm font-medium text-gray-700">Shipping Address</label>
                                        <textarea id="checkout-address" required class="mt-1 block w-full rounded-lg border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 p-3 border">123 Galactic Way, Space City, 90210</textarea>
                                    </div>
                                </div>

                                <h3 class="text-2xl font-semibold mt-10 mb-6 text-gray-800">Payment (Simulated)</h3>
                                <div class="bg-indigo-50 p-4 rounded-lg border border-indigo-200">
                                    <p class="text-sm font-medium text-indigo-800">
                                        Payment is simulated. Clicking "Pay Now" will process the order instantly.
                                    </p>
                                </div>
                                <button type="submit"
                                    class="w-full mt-8 flex items-center justify-center rounded-lg border border-transparent bg-green-600 px-6 py-3 text-lg font-semibold text-white shadow-md hover:bg-green-700 transition duration-150 active:scale-95">
                                    Pay Now ${formatCurrency(cartTotal.total)}
                                </button>
                                <button type="button" onclick="setView('Cart')" class="w-full mt-3 text-center text-sm text-indigo-600 hover:text-indigo-800 transition">
                                    &larr; Back to Cart
                                </button>
                            </form>
                        </div>
                        
                        <!-- Order Summary -->
                        <div class="lg:col-span-1 mt-10 lg:mt-0">
                            <div class="bg-gray-50 p-8 rounded-xl shadow-xl sticky top-8">
                                <h3 class="text-2xl font-semibold mb-4 text-gray-800">Order Summary</h3>
                                <div class="mb-6">${reviewItemsHtml}</div>
                                
                                <dl class="space-y-2 border-t pt-4">
                                    <div class="flex justify-between">
                                        <dt class="text-gray-600">Subtotal</dt>
                                        <dd class="font-medium text-gray-900">${formatCurrency(cartTotal.subtotal)}</dd>
                                    </div>
                                    <div class="flex justify-between">
                                        <dt class="text-gray-600">Shipping</dt>
                                        <dd class="font-medium text-gray-900">${formatCurrency(cartTotal.shipping)}</dd>
                                    </div>
                                    <div class="flex justify-between">
                                        <dt class="text-gray-600">Tax (5%)</dt>
                                        <dd class="font-medium text-gray-900">${formatCurrency(cartTotal.tax)}</dd>
                                    </div>
                                    <div class="flex justify-between border-t border-gray-300 pt-4 mt-4">
                                        <dt class="text-xl font-bold text-gray-900">Total Charged</dt>
                                        <dd class="text-xl font-bold text-green-600">${formatCurrency(cartTotal.total)}</dd>
                                    </div>
                                </dl>
                            </div>
                        </div>
                    </div>
                </div>
            `;
        }
        
        function renderConfirmation() {
            return `
                <div class="max-w-xl mx-auto text-center py-20 bg-white rounded-xl shadow-2xl border-t-8 border-green-500">
                    <svg class="mx-auto h-16 w-16 text-green-500" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path></svg>
                    <h2 class="mt-4 text-3xl font-extrabold text-gray-900">Thank You!</h2>
                    <p class="mt-2 text-lg text-gray-600">Your order has been placed successfully.</p>
                    <p class="mt-1 text-sm text-gray-500">A confirmation has been sent to your email.</p>
                    
                    <div class="mt-8 space-y-4">
                        <button onclick="setView('ProductList')"
                            class="w-4/5 mx-auto flex items-center justify-center rounded-lg border border-transparent bg-indigo-600 px-6 py-3 text-base font-medium text-white shadow-sm hover:bg-indigo-700 transition duration-150 active:scale-95">
                            Continue Shopping
                        </button>
                        <p class="text-sm text-gray-500">
                            Your User ID (for order history): <code class="font-mono text-xs select-all">${currentUserId}</code>
                        </p>
                    </div>
                </div>
            `;
        }

        function renderApp() {
            let contentHtml = '';
            switch (currentView) {
                case 'Cart':
                    contentHtml = renderCart();
                    break;
                case 'Checkout':
                    contentHtml = renderCheckout();
                    break;
                case 'Confirmation':
                    contentHtml = renderConfirmation();
                    break;
                case 'ProductList':
                default:
                    contentHtml = renderProductList();
                    break;
            }
            shopApp.innerHTML = contentHtml;
            document.body.scrollTop = 0; // For Safari
            document.documentElement.scrollTop = 0; // For Chrome, Firefox, IE and Opera
        }

        // --- MAIN INITIALIZATION LOGIC ---

        async function initApp() {
            // 1. Authenticate User
            let userCredential;
            try {
                if (initialAuthToken) {
                    userCredential = await signInWithCustomToken(auth, initialAuthToken);
                } else {
                    userCredential = await signInAnonymously(auth);
                }
            } catch (error) {
                console.error("Firebase Auth Error:", error);
                // Fallback: If auth fails, use a random ID but data persistence might be limited
                currentUserId = 'anon-' + window.crypto.randomUUID();
                console.warn("Using fallback anonymous ID:", currentUserId);
            }
            
            if (userCredential && userCredential.user) {
                currentUserId = userCredential.user.uid;
            }

            // 2. Seed/Fetch Products and Start Cart Listener
            await seedProducts();
            listenToCart(); 
            
            // 3. RENDER THE APP: Yeh line missing thi, jo ab add kar di gayi hai.
            renderApp();
        }

        // --- GLOBAL SETUP ---
        window.onload = () => {
            initApp();
        };
    </script>
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;600;700;800&display=swap');
        body {
            font-family: 'Inter', sans-serif;
            background-color: #f8fafc;
        }
        /* Fix for non-dynamic attribute class */
        .cart-badge-base {
            display: inline-flex;
            align-items: center;
            justify-content: center;
            padding: 0.25rem 0.5rem;
            font-size: 0.75rem;
            font-weight: 700;
            line-height: 1;
            color: #fef2f2; /* red-100 */
            transform: translate(50%, -50%);
            background-color: #dc2626; /* red-600 */
            border-radius: 9999px;
            position: absolute;
            top: 0;
            right: 0;
        }
    </style>
</head>
<body class="min-h-screen">

    <header class="bg-white shadow-md sticky top-0 z-10">
        <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
            <div class="flex justify-between items-center py-4">
                <!-- Logo/Brand -->
                <a href="#" onclick="setView('ProductList')" class="text-3xl font-extrabold text-indigo-600 tracking-tight">
                    Stellar<span class="text-gray-800">Shop</span>
                </a>
                
                <!-- Navigation & Cart -->
                <div class="flex items-center space-x-6">
                    <button onclick="setView('ProductList')" class="text-gray-600 hover:text-indigo-600 font-medium transition duration-150 hidden sm:block">
                        Shop
                    </button>
                    <!-- Cart Button -->
                    <button onclick="setView('Cart')" class="relative p-2 rounded-full text-gray-600 hover:bg-gray-100 hover:text-indigo-600 transition duration-150">
                        <svg class="h-6 w-6" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 3h2l.4 2M7 13h10l4-8H5.4M7 13L5.4 5M7 13l-2.293 2.293c-.63.63-.184 1.707.707 1.707H17m0 0a2 2 0 100 4 2 2 0 000-4zm-8 2a2 2 0 11-4 0 2 2 0 014 0z"></path></svg>
                        <!-- Cart count will be updated dynamically by JavaScript -->
                        <span id="cart-count" class="cart-badge-base hidden"></span>
                    </button>
                </div>
            </div>
        </div>
    </header>

    <main class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-10">
        <!-- Message Box for Alerts (No alert() used) -->
        <div id="message-box"></div>
        
        <!-- Main Application View -->
        <div id="shop-app">
            <!-- Content rendered here by JavaScript -->
            <div class="text-center py-20 text-gray-500">Loading store...</div>
        </div>
    </main>
    
    <footer class="bg-gray-800 text-white mt-10 p-6 text-center text-sm">
        <p>&copy; 2025 Stellar Shop. All rights reserved. Backend powered by Firebase Firestore.</p>
    </footer>
    
</body>
</html>
